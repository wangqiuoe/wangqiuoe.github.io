I"%<h2 id="about-python">about python</h2>
<h3 id="funcx"><code class="language-plaintext highlighter-rouge">func(*x)</code></h3>
<p>if <code class="language-plaintext highlighter-rouge">x</code> is a tuple, or list, then will pass all elements of <code class="language-plaintext highlighter-rouge">x</code> to <code class="language-plaintext highlighter-rouge">func</code> instead of a tuple or list <code class="language-plaintext highlighter-rouge">x</code>, i.e.,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="p">(</span><span class="s">'F'</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s">'chinese'</span><span class="p">)</span>
<span class="n">x2</span> <span class="o">=</span> <span class="p">(</span><span class="s">'M'</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="s">'american'</span><span class="p">)</span>
<span class="n">x3</span> <span class="o">=</span> <span class="p">(</span><span class="s">'M'</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="s">'english'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">funcOut</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">)</span>
    <span class="n">names</span><span class="p">,</span> <span class="n">ages</span><span class="p">,</span> <span class="n">nationalities</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'----'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">ages</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">nationalities</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">x1</span><span class="p">,</span><span class="n">x2</span><span class="p">,</span><span class="n">x3</span><span class="p">]</span>
<span class="n">funcOut</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">)</span>

<span class="s">"""
('F', 20, 'chinese') ('M', 26, 'american') ('M', 27, 'english')
----
('F', 'M', 'M')
(20, 26, 27)
('chinese', 'american', 'english')
"""</span>

</code></pre></div></div>

<h3 id="setattrobj-name-value"><code class="language-plaintext highlighter-rouge">setattr(obj, name, value)</code></h3>
<p>Sets the named attribute on the given object to the specified value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TestObj</span><span class="p">():</span>
    <span class="n">param1</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">testObj</span> <span class="o">=</span> <span class="n">TestObj</span>
<span class="k">print</span><span class="p">(</span><span class="s">'testObj.param1 ='</span><span class="p">,</span> <span class="n">testObj</span><span class="p">.</span><span class="n">param1</span><span class="p">)</span>
<span class="nb">setattr</span><span class="p">(</span><span class="n">testObj</span><span class="p">,</span> <span class="s">'param1'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'testObj.param1 ='</span><span class="p">,</span> <span class="n">testObj</span><span class="p">.</span><span class="n">param1</span><span class="p">)</span>

<span class="s">"""
testObj.param1 = 0
testObj.param1 = 5
"""</span>
</code></pre></div></div>

<h3 id="cholesky-decomposition">Cholesky decomposition</h3>
<ul>
  <li>solve \(A=LL^T\)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.linalg</span> <span class="kn">import</span> <span class="n">cho_factor</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>
<span class="n">c</span><span class="p">,</span> <span class="n">low</span> <span class="o">=</span> <span class="n">cho_factor</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">lower</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># c is cholesky decomposition of A that cc'=A
</span><span class="n">np</span><span class="p">.</span><span class="n">allclose</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">tril</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">tril</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="n">T</span><span class="p">),</span><span class="n">A</span><span class="p">)</span>
<span class="c1">#True
</span></code></pre></div>    </div>
  </li>
  <li>solve \(Ax=b\) given cho_factor of A
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.linalg</span> <span class="kn">import</span> <span class="n">cho_factor</span><span class="p">,</span> <span class="n">cho_solve</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>
<span class="n">c</span><span class="p">,</span> <span class="n">low</span> <span class="o">=</span> <span class="n">cho_factor</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="c1">#low:True
</span><span class="n">b</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">cho_solve</span><span class="p">((</span><span class="n">c</span><span class="p">,</span> <span class="n">low</span><span class="p">),</span><span class="n">b</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">allclose</span><span class="p">(</span><span class="n">A</span> <span class="o">@</span> <span class="n">x</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>  <span class="c1">#True
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="about-stax">about stax</h2>
<h3 id="predictpy"><code class="language-plaintext highlighter-rouge">predict.py</code></h3>
<ul>
  <li>func <code class="language-plaintext highlighter-rouge">k_inv_y</code>: return \(K_{dd}^{-1}Y_d\) where the inverse calculated by <code class="language-plaintext highlighter-rouge">scipy.linalg.cho_factor</code> and <code class="language-plaintext highlighter-rouge">scipy.linalg.cho_solve</code></li>
</ul>

:ET